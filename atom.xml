<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuke&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-24T14:17:16.193Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yuke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PDCP SDU Discard原因分析</title>
    <link href="http://yoursite.com/2019/05/07/PDCP-SDU-Discard-Analysis/"/>
    <id>http://yoursite.com/2019/05/07/PDCP-SDU-Discard-Analysis/</id>
    <published>2019-05-07T15:29:00.000Z</published>
    <updated>2019-09-24T14:17:16.193Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天遇到一个这样的case，在打volte call的时候，MO call出现PDCP SDU丢弃（discard）的现象，结果导致通话不畅。在Nan和dongliang的帮助下，逐渐分析出PDCP SDU为什么会出现被丢弃的现象。</p><p>首先分析一下PDCP SDU什么情况下会被丢弃。一般来说，PDCP SDU被丢弃都是由于PDCP discard timer超时所导致的。对控制面（control plane）而言，每当RRC层往PDCP层发一个PDCP SDU的时候，对应每个PDCP SDU都会启动一个discard timer；对用户面（user plane）而言，情况类似，每当DS（TCP/IP）往PDCP层发一个PDCP SDU的时候，对应每个PDCP SDU都会启动一个discard timer。</p><p>一旦PDCP层发送buffer有PDCP SDU，MAC就会发SR（Scheduling Request）给eNB，请求eNB给予UL grant。一般来说，eNB收到UE发送过来的SR之后，会根据空口资源的调配情况，给予UE一个较小的UL grant，这个UL grant虽然很小，但是足够UE发BSR了。UE在收到eNB回的UL grant之后，就会给eNB发BSR（buffer status report），告诉eNB它的PDCP buffer里面有多少东西要发送。这时候eNB收到UE的BSR后，再根据空口资源调配情况，给UE发UL grant，这回的UL grant就不再是用来传BSR的了，而是发真正的数据了。UE这回收到eNB回的UL grant，就会开始发送数据给eNB。这是正常情况下UE和eNB的行为。</p><p>但是，今天遇到的问题是，一个DRB的PDCP buffer收到上层发过来的数据后，MAC尝试发SR出去，但是却发不出去，结果超时了。在MAC发SR到SR超时的这段时间里，PDCP发送buffer里的PDCP SDU因为长时间没有发送出去，导致discard timer超时，然后就被discard掉。在SR超时后，MAC又不停地发RACH，结果还是一直失败，就这样，UE发不出去SR，eNB就不会回UL grant，UE也就不可能再发BSR，eNB也不会再回UL grant……</p><p>那么，为什么MAC会发不出去SR呢？这个问题还是得到ML1去找原因，因为MAC发SR，从逻辑上讲是UE的MAC给eNB的MAC发SR，但实际上UE的MAC是把SR发给了UE的ML1，ML1再将其发送出去的，但是因为ML1出于某些未知的原因，没有将SR发出去，所以eNB就不会收到SR。至于ML1是因为什么没有将SR发出去呢？这里就不清楚了，后续还得继续跟进这个问题……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="LTE" scheme="http://yoursite.com/categories/LTE/"/>
    
    
      <category term="LTE" scheme="http://yoursite.com/tags/LTE/"/>
    
      <category term="PDCP" scheme="http://yoursite.com/tags/PDCP/"/>
    
      <category term="MAC" scheme="http://yoursite.com/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>PDCP重建行为概述</title>
    <link href="http://yoursite.com/2019/05/03/PDCP-Re-establishment-Behaviour/"/>
    <id>http://yoursite.com/2019/05/03/PDCP-Re-establishment-Behaviour/</id>
    <published>2019-05-03T07:12:23.000Z</published>
    <updated>2019-09-24T14:17:15.178Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在LTE协议栈中，RLC层有重排序窗口（reordering window），目的是为了对接收到的乱序的数据包（RLC PDU）进行排序，然后从中解包，重组成顺序排列的RLC SDU，再向上提交给PDCP层。但是，除了RLC层以外，PDCP层也有重排序窗口，这又是为什么？RLC层已经实现重排序了 ，按理说提交给PDCP层的数据包都是顺序的了，为什么PDCP层还要有重排序窗口呢？这岂不是有点多余了？</p><p>原因就在于重建（re-establishment），在重建时，RLC层会失去它的重排序和重传功能，因此需要由PDCP层来代为实现。在正常情况下，使用AM模块的RLC实体可以通过重传机制保证数据的无损传输（注意，TM和UM模式下是没有重传功能的），但是在重建时，AMD RLC实体会做下面这几件事：</p><ul><li>RLC实体的接收端对接收buffer里所有SN小于VR(MR)的AMD PDU以及AMD PDU分段进行处理，从中重组出RLC SDU，将之前尚未提交过给PDCP的RLC SDU提交给PDCP，提交时按RLC SN由小到大的顺序提交</li><li>RLC实体的接收端丢弃剩下的AMD PDU和AMD PDU分段</li><li>RLC实体的发送端丢弃所有RLC SDU和AMD PDU</li><li>丢弃所有的RLC control PDU（发送端和接收端都丢弃）</li><li>停止和重置所有的定时器</li><li>重置所有状态变量为初始值</li></ul><p>由于RLC实体将所有的状态变量都重置为初始值，并且清空了接收buffer，因此，在重建之后，RLC实体对其接收状态完全失忆，RLC不知道它在重建之前接收窗口内哪些PDU已经接收到了，哪些PDU还没有接收到，因此它无法通过给对方发status report来通知对方重传那些它还没接收到的PDU，而即使是重建之后，状态变量没有被重置，仍然保持为重建前的值，但是由于对方RLC实体的发送端已经丢弃所有的RLC SDU和AMD PDU，因此即便给对方发status  report，它也无法回复RLC PDU给我们。你可能会想，那为什么RLC发送端要丢弃AMD PDU和RLC SDU呢？仍然保留着不行吗？这又涉及到PDCP层了，因为在重建后，PDCP层采用了新的加密算法、完整性保护算法以及压缩算法，所以如果还是把原来的RLC PDU发过来，传到PDCP层进行解密、完整性校验以及解压缩的时候，必然是会出问题的，因此，无论如何，仅通过RLC是无法保证重建前后能做到无损传输的。</p><p>这时候PDCP层就起作用了，在重建时，PDCP层会收到RLC层所重组出来的RLC SDU，PDCP对这些这些RLC SDU处理，更新count值(i.e. HFN,PDCP SN)，在重建后，PDCP仍然维持着重建前的count值，因此知道它有哪些PDCP SDU之前没有被收着，PDCP会生成一帧PDCP status report发给对方，告诉对方我还有哪些PDCP SDU没有收到，然后对方会对那些我没收到的PDCP SDU使用新的加密、压缩和完整性保护算法处理成PDCP PDU，再发过来。这样，通过PDCP层就能保证重建前后无损传输。</p><p>下面我以SeungJune Yi等人写的<a href="https://www.amazon.com/Radio-Protocols-LTE-LTE-Advanced-SeungJune/dp/1118188535" target="_blank" rel="noopener"><strong>Radio Protocols for LTE and LTE-Advanced</strong></a>一书中4.6.3节的例子来阐述一下AM DRB在Handover时的行为（在handover时会进行重建）。在handover前后，UE和eNB的PDCP层收发情况如图1所示，在handover之前，eNB给UE发送了PDCP SDU 11 ~ 15，但UE只成功接收到SN13、15 PDCP SDU（此时PDCP SDU13、15实际上仍然是以RLC PDU/RLC SDU的形式保留在RLC层，RLC层并未向PDCP层提交，RLC必须要按序提交，此时前面还有洞，显然不能提交），然后UE给eNB回了一帧RLC status report，告诉eNB它的接收情况。eNB收到UE回的RLC status report后，根据对RLC status report的分析，知道UE成功收到了SN13、15 PDCP SDU，SN11、12、14 PDCP SDU则丢失了，于是，eNB通过RLC层的重传机制，重传了SN11、12、14 PDCP SDU（即重传这几个PDCP SDU所生成的RLC PDU），这一次UE只成功收到了SN11 PDCP SDU，但是SN12、14则丢失了。因为PDCP SDU11恰好是in sequence（即期望接收到的按序的PDCP SDU），于是PDCP实体将PDCP SDU11向上层提交。此时，handover发生了。</p><p><img src="/2019/05/03/PDCP-Re-establishment-Behaviour/AM_DRB_Behaviour_at_Handover.PNG" alt="image" title="图1  AM DRB在handover时PDCP层的行为"></p><p>在handover期间，source eNB将没被确认的PDCP SDU 11、12和14以及尚未发送的PDCP SDU16转发至target eNB，target eNB将它们保存在发送buffer里，准备在handover之后进行重传和发送。与此同时，在handover时，RLC层进行重建，完成重建后RLC层将其保存的PDCP SDU13、15提交给PDCP层，对PDCP层而言，PDCP SDU13、15是out-of-sequence的，因为此时它还没收到PDCP SDU12，于是PDCP层将其保存在PDCP层的reordering buffer里面，同时PDCP层也进行重建。</p><p>在handover之后，PDCP层也完成了重建，假如上层配置RB在uplink方向发送PDCP status report的话（<em>statusReportRequired</em>，见36.331），UE会生成一帧PDCP status report，发给RLC层，作为handover后发的第一帧PDCP PDU，然后再发送至target eNB，告诉target eNB它已经收到了PDCP SDU11、13、15，还没有收到PDCP SDU12、14。根据收到的PDCP status report，target eNB知道PDCP SDU11在handover前已被UE接收，于是将发送buffer中保存的PDCP SDU11丢弃。target eNB重传PDCP SDU12、14给UE，在收到PDCP SDU12、14后，UE对它们和已经接收到的PDCP SDU13、15进行重排序，然后将排序后的PDCP SDU12 ~ 15按升序提交给上层。</p><p>在target eNB端，target eNB对由source eNB转发过来的尚未发送的PDCP SDU16以及由S-GW发送过来的新的PDCP SDU17、18进行重新标号。source eNB告诉target eNB它最后发送的PDCP SDU的SN为15，target eNB就从这个数字的下一个SN开始，对尚未发送的PDCP SDU及新接收到的PDCP SDU进行标号，在对PDCP SDU标号的时候，target eNB首先对source eNB转发过来的PDCP SDU标号，然后才会对新的PDCP SDU进行标号。因此source eNB转发过来的PDCP SDU重新标号后SN仍是16，新的PDCP SDU则是17、18。</p><p>可见，通过PDCP层，可以保证在重建前后的无损传输，在重建前，UE尚未接收到PDCP SDU12、14，然后发生了handover，在handover后，PDCP完成重建，通过PDCP的status report，完成PDCP SDU12、14的重传，保证了数据的无损传输。</p><p>后记：我看Radio Protocols for LTE and LTE-Advanced一书的时候，在4.6节提到了PDCP重建时对COUNT（i.e.,HFN和PDCP SN）的维护，从4.6.3节看确实AM DRB的PDCP在重建前后对COUNT会进行维护，而在spec(36.323)的7.1节上，<font color="red">Next_PDCP_TX_SN、TX_HFN、Next_PDCP_RX_SN、RX_HFN这几个状态变量在establishment时会被初始化为0，Last_Submitted_PDCP_RX_SN被初始化为Maximum_PDCP_SN</font>，说明重建时这几个变量还是会保持为原来的值，只有establishment时才会初始化为0和Maximum_PDCP_SN。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="LTE" scheme="http://yoursite.com/categories/LTE/"/>
    
    
      <category term="LTE" scheme="http://yoursite.com/tags/LTE/"/>
    
      <category term="PDCP" scheme="http://yoursite.com/tags/PDCP/"/>
    
  </entry>
  
  <entry>
    <title>对RLC重排序窗口大小的一点讨论</title>
    <link href="http://yoursite.com/2019/05/02/RLC-Window-Size-discussion/"/>
    <id>http://yoursite.com/2019/05/02/RLC-Window-Size-discussion/</id>
    <published>2019-05-02T06:11:04.000Z</published>
    <updated>2019-09-24T14:54:40.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在LTE协议栈的PDCP层和RLC层，都有一个重排序窗口（reordering window），主要用来保证数据的可靠传输，PDCP层的重排序窗口主要用于handover时保证数据的可靠传输，这里暂且不表，只讨论RLC层的重排序窗口。</p><p>对RLC层，在AM接收模式和UM接收模式下，UM接收实体/AM实体接收端有一个重排序窗口，当接收到的RLC  PDU位于重排序窗口内，且之前没有被接收过时，接收端才会对该RLC PDU进行处理，重排序窗口大小无论是在UM模式还是AM模块下都是序列号（SN）取值范围的一半。例如，在AM模式下，假如SN长度为10bit，那么SN取值范围为0 ~ 2^10-1，即0 ~ 1023，则重排序窗口大小为512。</p><p>刚开始的时候，我一直不太明白，为什么重排序窗口要选择这么一个数？不能取大点或者取小点吗？我想了一下，没想明白，就囫囵吞枣地默认了这个事实，直到有一天，我在Andrew S. Tanenbaum写的<strong><a href="https://www.amazon.com/Computer-Networks-Andrew-S-Tanenbaum-ebook/dp/B006Y1BKGC" target="_blank" rel="noopener">Computer Networks</a></strong>一书中才偶然发现了答案。As an aside，这里推荐一下Tanenbaum写的另外一本书——<a href="https://www.amazon.com/Modern-Operating-Systems-Andrew-Tanenbaum/dp/013359162X" target="_blank" rel="noopener"><strong>Modern operating systems</strong></a>，这本书对现代操作系统里面基本的元素和概念都进行了比较详细的阐述，虽然有些地方略有晦涩，并且似乎有点far-fetched之嫌，但是不深究里面的code snippet，仅从其对操作系统一些思想的论述来理解操作系统的设计的话，仍然大有裨益。</p><p>回到前面的讨论，在AM模式下，RLC PDU不一定要按序接收，假如收到的RLC PDU不是期望接收到的下一帧RLC PDU（i.e. 其SN不等于VR(R)变量的值），但是却位于重排序窗口内，那么接收端仍然会将该RLC PDU缓存下来，这种非顺序接收(Nonsequential receive)方法相比只能按序接收的协议会引入一个问题，而这个问题恰好可以通过对重排序窗口大小的设置来优雅地解决掉。这里我直接引用Tanenbaum的<strong>Computer Networks</strong>一书中3.4.3节的例子来阐述这个问题。</p><p>假设现在RLC PDU的SN号长度为3bit，初始时刻，发送端和接收端的窗口如图所示。图中，a图是初始时刻发送端和接收端窗口的情况。发送端发送窗口为0~6，假设发送端将发送窗口内的RLC PDU全都发送出去了，接收端成功地接收到了SN0~6 RLC PDU，那么接收端就会将窗口往右挪，并将VR(MS)更新为7，此时接收窗口变为7、0~5，如b图所示。同时，接收端会给发送端发ACK，通知发送端它已经接收到了SN0 ~6 RLC PDU，发送端可以发送新的RLC PDU了。不幸的是，接收端给发送端回复的ACK全都丢失了，发送端一个都没收着，其发送窗口仍然保持不动，这种情况被称为window stalling(窗口停滞)。就这样，一段时间过后，发送端的t-PollRetransmit timer将会超时，此时发送端还没有收到0~6 RLC PDU的ACK，它会认为对方可能没有收到这7个RLC PDU，于是又重传SN0 RLC PDU，并且将该RLC PDU header里的Poll位置1，询问对方是不是没有收着它刚发出去的7个RLC PDU。当SN0 RLC PDU到达接收端时，接收端检查其是否位于接收窗口内，此时接收窗口为7、0~5，如b图所示。很不幸，SN0 RLC PDU正好位于其中，接收端认为这是一帧新的RLC PDU，于是很愉快地接收下这帧RLC PDU，然后回了一帧status report（因为它收到的RLC PDU的P位为1），ACK_SN为7，告诉发送端SN 0~6 RLC PDU都已经接收到了。发送端这会终于收到ACK了(i.e. status report)，知道SN 0~6 RLC PDU已经被对方成功接收了，于是很愉快地把发送窗口往前移动，发送窗口变为7、0~5。发送端继续发送SN7、0 ~ 5 RLC PDU给对方，接收端收到SN7、0~5RLC PDU后，发现接收buffer里面已经有SN0 RLC PDU了，就认为新接收到的SN0 RLC PDU是duplicate packet，于是就把新接收到的SN0 RLC PDU给丢弃了，然后对接收buffer里的旧的SN0 RLC PDU连同新接收到的SN7、SN1~5 RLC PDU一起解析，再向上提交给PDCP层。显然，PDCP会得到错误的packet，原因就在于RLC层把旧的SN0 RLC PDU当成了新的RLC PDU，而把真正的新的RLC PDU当成了duplicate packet给丢弃了，通信就此出错。</p><p><img src="/2019/05/02/RLC-Window-Size-discussion/RLC_Reordering_Window.PNG" alt="image" title="图1  RLC窗口大小不同时收发状态"></p><p>解决这个问题的方法就是要确保接收窗口在往右移动的过程中，不会把原来的窗口给覆盖掉（即窗口移进来的部分不会与窗口移出去的部分发生重叠），上面的例子之所以会出错，就是因为接收窗口往右移动的过程中，新的窗口右边缘为SN5，刚好落入到旧的窗口里面(SN0~6)，新的窗口把旧的窗口的一部分给覆盖掉了(覆盖了SN0 ~ 5)。为了保证新的窗口不会覆盖到旧的窗口，窗口的大小最大不能超过序列号范围的一半。以图c和图d为例，序列号的范围仍然为0~7，发送窗口大小变为4，任何时刻最多只能有4帧没有被确认的RLC PDU。这种情况下，当接收端接收到SN0 ~ 3 RLC PDU之后，将会往右移动接收窗口，允许接收SN 4 ~ 7 RLC PDU，这时候，接收端可以明确地区分出发送端发过来的是重传的RLC PDU(SN0 ~ 3)还是新的RLC PDU(SN4 ~ 7)。一般来说，接收窗口和发送窗口的大小为(MAX_SEQ+1)/2，MAX_SEQ为SN的最大取值。上面的例子中，MAX_SEQ为7，因此窗口大小应该设置为4。当然了，窗口大小也可以取小一点，(MAX_SEQ+1)/2只是一个上界，极端一点的话，甚至可以把窗口大小设为1，但是没人会这么干，因为这样的话每次发送都只能发送一帧RLC PDU，然后又要等上老半天，等接收到对方的回复的确认才能发下一帧，采用这种通信方式效率会非常低。所以，这就是为什么RLC层窗口的大小要设置为序列号一半的原因。</p>    <div id="aplayer-nBPdlHQT" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="26635189" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="LTE" scheme="http://yoursite.com/categories/LTE/"/>
    
    
      <category term="LTE" scheme="http://yoursite.com/tags/LTE/"/>
    
      <category term="RLC" scheme="http://yoursite.com/tags/RLC/"/>
    
  </entry>
  
  <entry>
    <title>进程与线程概述</title>
    <link href="http://yoursite.com/2019/04/17/Process-and-thread/"/>
    <id>http://yoursite.com/2019/04/17/Process-and-thread/</id>
    <published>2019-04-17T14:59:44.000Z</published>
    <updated>2019-09-24T14:47:45.374Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>进程与线程是现代操作系统中非常重要的两个概念，其主要区别是，所有进程有自己的独立访问空间，而所有线程则共用同一地址空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Operating System" scheme="http://yoursite.com/categories/Operating-System/"/>
    
    
      <category term="Operating System" scheme="http://yoursite.com/tags/Operating-System/"/>
    
      <category term="Process" scheme="http://yoursite.com/tags/Process/"/>
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/07/hello-world/"/>
    <id>http://yoursite.com/2019/04/07/hello-world/</id>
    <published>2019-04-06T19:34:55.657Z</published>
    <updated>2019-09-24T14:45:59.318Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Template" scheme="http://yoursite.com/categories/Template/"/>
    
    
  </entry>
  
</feed>
